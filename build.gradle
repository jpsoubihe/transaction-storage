plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.flywaydb.flyway" version "10.19.0"
    id 'com.google.cloud.tools.jib' version '3.4.3'
    id 'jacoco'
    id "org.sonarqube" version "4.0.0.2929"
}

group = 'com.personal'
version = '0.0.26'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sonar {
    properties {
        property "sonar.host.url", "http://localhost:9001"
        property "sonar.projectKey", "transaction-storage"
        property "sonar.login", "sqp_c8e45fe3af1ad52f317d081a3f3cca05c1ceb0b6"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.flywaydb:flyway-core:10.17.3'
    implementation 'com.github.ben-manes.caffeine:caffeine'
    implementation 'ch.qos.logback:logback-core'
    runtimeOnly 'org.flywaydb:flyway-database-postgresql:10.17.3'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'ch.qos.logback:logback-classic'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:postgresql:1.20.0"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacoco/jacocoHtml')
    }
    getExecutionData().setFrom(fileTree(layout.buildDirectory).include("/jacoco/*.exec"))
}